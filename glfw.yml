--- 
GENERATOR: 
  PackageName: glfw
  PackageDescription: "Package glfw provides Go bindings for the GLFW 3.2 API."
  PackageLicense: "THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS."
  Includes:
    - GLFW/glfw3.h
    - callbacks.h
  FlagGroups:
    - {name: LDFLAGS, traits: ["darwin"], flags: [
      -framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo -lglfw3
    ]}
    - {name: LDFLAGS, traits: ["linux"], flags: [
      -lGL -lX11 -lXrandr -lXxf86vm -lXi -lXcursor -lm -lXinerama -ldl -lrt -lglfw3
    ]}
    - {name: LDFLAGS, traits: ["windows"], flags: [
      -lopengl32 -lgdi32 -lglfw3
    ]}
    - {name: LDFLAGS, traits: ["freebsd"], flags: [
      -lGL -lX11 -lXrandr -lXxf86vm -lXi -lXcursor -lm -lXinerama -lglfw3
    ]}
    - {name: CFLAGS, traits: ["darwin"], flags: [
      -D_GLFW_COCOA -D_GLFW_USE_CHDIR -D_GLFW_USE_MENUBAR -D_GLFW_USE_RETINA -Wno-deprecated-declarations
    ]}
    - {name: CFLAGS, traits: ["linux,wayland"], flags: [
      -D_GLFW_WAYLAND
    ]}
    - {name: CFLAGS, traits: ["linux,!wayland"], flags: [
      -D_GLFW_X11
    ]}
    - {name: CFLAGS, traits: ["windows"], flags: [
      -D_GLFW_WIN32
    ]}
    - {name: CFLAGS, traits: ["freebsd,wayland"], flags: [
      -D_GLFW_WAYLAND -D_GLFW_HAS_DLOPEN
    ]}
    - {name: CFLAGS, traits: ["freebsd,!wayland"], flags: [
      -D_GLFW_X11 -D_GLFW_HAS_GLXGETPROCADDRESSARB -D_GLFW_HAS_DLOPEN
    ]}

PARSER:
  SourcesPaths:
    - GLFW/glfw3.h
    - callbacks.h
  IncludePaths:
    - /usr/include
    - /usr/local/include
  Defines:
    __APPLE__: 1

TRANSLATOR: 
  ConstRules: 
    defines: expand
    enum: expand
  PtrTips:
    function:
      - {target: GetRequiredInstanceExtensions$, self: arr, tips: [ref]}
      - {target: ^glfw, tips: [sref,sref,sref,sref,sref,sref,]} # defaults
  Rules: 
    global:
      - {action: accept, from: "^GLFW"}
      - {action: replace, from: "^GLFW"}
    function:
      - {action: accept, from: ^glfw}
      - {action: replace, from: ^glfw}
      - {action: replace, from: fun$, to: Func}

      - {action: ignore, from: SetKeyCallback$}
      - {action: ignore, from: SetCharCallback$}
      - {action: ignore, from: SetCharModsCallback$}
      - {action: ignore, from: SetMouseButtonCallback$}
      - {action: ignore, from: SetCursorPosCallback$}
      - {action: ignore, from: SetCursorEnterCallback$}
      - {action: ignore, from: SetScrollCallback$}
      - {action: ignore, from: SetDropCallback$}
      - {action: ignore, from: SetJoystickCallback$}
      - {action: ignore, from: SetErrorCallback$}
      - {action: ignore, from: SetMonitorCallback$}
      - {action: ignore, from: SetWindowPosCallback$}
      - {action: ignore, from: SetWindowSizeCallback$}
      - {action: ignore, from: SetWindowCloseCallback$}
      - {action: ignore, from: SetWindowRefreshCallback$}
      - {action: ignore, from: SetWindowFocusCallback$}
      - {action: ignore, from: SetWindowIconifyCallback$}
      - {action: ignore, from: SetFramebufferSizeCallback$}
      - {action: ignore, from: GetProcAddress}

      - {action: replace, from: SetKeyCallbackVoid$, to: SetKeyCallback}
      - {action: replace, from: SetCharCallbackVoid$, to: SetCharCallback}
      - {action: replace, from: SetCharModsCallbackVoid$, to: SetCharModsCallback}
      - {action: replace, from: SetMouseButtonCallbackVoid$, to: SetMouseButtonCallback}
      - {action: replace, from: SetCursorPosCallbackVoid$, to: SetCursorPosCallback}
      - {action: replace, from: SetCursorEnterCallbackVoid$, to: SetCursorEnterCallback}
      - {action: replace, from: SetScrollCallbackVoid$, to: SetScrollCallback}
      - {action: replace, from: SetDropCallbackVoid$, to: SetDropCallback}
      - {action: replace, from: SetJoystickCallbackVoid$, to: SetJoystickCallback}
      - {action: replace, from: SetErrorCallbackVoid$, to: SetErrorCallback}
      - {action: replace, from: SetMonitorCallbackVoid$, to: SetMonitorCallback}
      - {action: replace, from: SetWindowPosCallbackVoid$, to: SetWindowPosCallback}
      - {action: replace, from: SetWindowSizeCallbackVoid$, to: SetWindowSizeCallback}
      - {action: replace, from: SetWindowCloseCallbackVoid$, to: SetWindowCloseCallback}
      - {action: replace, from: SetWindowRefreshCallbackVoid$, to: SetWindowRefreshCallback}
      - {action: replace, from: SetWindowFocusCallbackVoid$, to: SetWindowFocusCallback}
      - {action: replace, from: SetWindowIconifyCallbackVoid$, to: SetWindowIconifyCallback}
      - {action: replace, from: SetFramebufferSizeCallbackVoid$, to: SetFramebufferSizeCallback}
    type:
      - {action: replace, from: fun$, to: Func}
    const:
      - {action: replace, from: _CURSOR$, to: _MOUSE_CURSOR}
      - {transform: lower}
    private:
      - {transform: unexport}
    post-global:
      - {transform: export}
      - {load: snakecase}


